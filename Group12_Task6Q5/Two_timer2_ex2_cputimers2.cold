//
// Included Files
//
#include "driverlib.h"
#include "device.h"
long long timer0;
//
// Globals
//
uint16_t cpuTimer0IntCount;
uint16_t cpuTimer1IntCount;
uint32_t sysClockFreq = 0; // Variable to store system clock frequency

//
// Function Prototypes
//
__interrupt void cpuTimer0ISR(void);
__interrupt void cpuTimer1ISR(void);
void initCPUTimers(void);
void configCPUTimer(uint32_t, float, float);


//
// Main
//
void main(void)
{
    // Initializes device clock and peripherals
    Device_init();

    // Initializes PIE and clears PIE registers. Disables CPU interrupts.
    Interrupt_initModule();

    // Initializes the PIE vector table with pointers to the shell Interrupt
    // Service Routines (ISR).
    Interrupt_initVectorTable();

    // Register ISRs for each CPU Timer interrupt
    Interrupt_register(INT_TIMER0, &cpuTimer0ISR);
    Interrupt_register(INT_TIMER1, &cpuTimer1ISR);

    // Initialize the Device Peripheral. For this example, only initialize the
    // CPU Timers.
    initCPUTimers();



    // Get the system clock frequency
      sysClockFreq = SysCtl_getClock(DEVICE_OSCSRC_FREQ);
      // Configure CPU-Timer 0 and 1
     configCPUTimer(CPUTIMER0_BASE, sysClockFreq, 8000);     // fs= 8000 in Hertz
     configCPUTimer(CPUTIMER1_BASE, sysClockFreq, 2000);     // fs= 4000 in Hertz




    // Enable interrupts for CPU Timers
    CPUTimer_enableInterrupt(CPUTIMER0_BASE);
    CPUTimer_enableInterrupt(CPUTIMER1_BASE);
    Interrupt_enable(INT_TIMER0); // this also Enable interrupt 1.7 (timer0)
    Interrupt_enable(INT_TIMER1);

    // Start CPU Timers
    CPUTimer_startTimer(CPUTIMER0_BASE);
    CPUTimer_startTimer(CPUTIMER1_BASE);

    // Enable Global Interrupt (INTM) and real-time interrupt (DBGM)
    EINT;
    ERTM;


    // IDLE loop
    while(1)
    {
        // Optionally perform some actions based on timer interrupts
    }
}

//
// initCPUTimers - This function initializes all CPU timers
// to a known state.
//
void initCPUTimers(void)
{
    // Initialize timer period to maximum
    CPUTimer_setPeriod(CPUTIMER0_BASE, 0xFFFFFFFF);
    CPUTimer_setPeriod(CPUTIMER1_BASE, 0xFFFFFFFF);

    // Initialize pre-scale counter to divide by 1 (SYSCLKOUT)
    CPUTimer_setPreScaler(CPUTIMER0_BASE, 0);
    CPUTimer_setPreScaler(CPUTIMER1_BASE, 0);

    // Make sure timer is stopped
    CPUTimer_stopTimer(CPUTIMER0_BASE);
    CPUTimer_stopTimer(CPUTIMER1_BASE);

    // Reload all counter register with period value
    CPUTimer_reloadTimerCounter(CPUTIMER0_BASE);
    CPUTimer_reloadTimerCounter(CPUTIMER1_BASE);

    // Reset interrupt counters
    cpuTimer0IntCount = 0;
    cpuTimer1IntCount = 0;
}

//
// configCPUTimer - This function initializes the selected timer to the
// period specified by the "freq" and "period" parameters. The "freq" is
// entered as Hz and the period in uSeconds. The timer is held in the stopped
// state after configuration.
//
void configCPUTimer(uint32_t cpuTimer, float freq, float fs)
{
    uint32_t temp = (uint32_t)(freq / fs);

    // Initialize timer period
    CPUTimer_setPeriod(cpuTimer, temp);

    // Set pre-scale counter to divide by 1 (SYSCLKOUT)
    CPUTimer_setPreScaler(cpuTimer, 0);

    // Initializes timer control register. The timer is stopped, reloaded,
    // free run disabled, and interrupt enabled.
    CPUTimer_stopTimer(cpuTimer);
    CPUTimer_reloadTimerCounter(cpuTimer);
    CPUTimer_setEmulationMode(cpuTimer, CPUTIMER_EMULATIONMODE_STOPAFTERNEXTDECREMENT);
    CPUTimer_enableInterrupt(cpuTimer);

    // Reset interrupt counter for the specified timer
    if (cpuTimer == CPUTIMER0_BASE)
    {
        cpuTimer0IntCount = 0;
    }
    else if (cpuTimer == CPUTIMER1_BASE)
    {
        cpuTimer1IntCount = 0;
    }
}

//
// cpuTimer0ISR - ISR for CPU Timer 0
//
__interrupt void cpuTimer0ISR(void)
{
//    timer0= Timer_getTimerCount(CPUTIMER0_BASE);

    cpuTimer0IntCount++;

    // Acknowledge this interrupt to receive more interrupts from group 1
    Interrupt_clearACKGroup(INTERRUPT_ACK_GROUP1);
}

//
// cpuTimer1ISR - ISR for CPU Timer 1
//
__interrupt void cpuTimer1ISR(void)
{
    cpuTimer1IntCount++;

    // Acknowledge this interrupt to receive more interrupts from group 1
    Interrupt_clearACKGroup(INTERRUPT_ACK_GROUP1);
}

//
// End of File
//
